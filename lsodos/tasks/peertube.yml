---
- name: Install apt packages for elsodos
  ansible.builtin.apt:
    pkg:
      - curl
      - unzip
      - vim
      - wget
      - nodejs
      - npm
      - python3-dev
      - python3-pip
      - python-is-python3
      - certbot
      - nginx
      - ffmpeg
      - postgresql
      - postgresql-contrib
      - openssl
      - g++
      - make
      - redis-server
      - git
      - cron
    state: latest
    update_cache: yes
  become: true

- name: Install yarn
  ansible.builtin.command: "npm install --global yarn"
  become: true

- name: Start Redis
  ansible.builtin.systemd_service:
    name: redis
    state: started
    enabled: true
  become: true

- name: Start postgres
  ansible.builtin.systemd_service:
    name: postgresql
    state: started
    enabled: true
  become: true

- name: Create PeerTube User
  ansible.builtin.user:
    name: peertube
    home: /var/www/peertube
    create_home: true
    shell: /bin/bash
    password: "{{ PEERTUBEUSERPASS }}"
  become: true

# ls -ld /var/www/peertube # Should be drwxr-xr-x

- name: Create Postgres DB User
  ansible.builtin.command: psql -c "CREATE USER peertube with password "{{ PEERTUBEDBPASS }}";"
  become_user: postgres
  become: true

- name: Create Postgres DB
  ansible.builtin.command: "createdb -O peertube -E UTF8 -T template0 peertube_prod"
  become_user: postgres
  become: true

- name: Edit DB parameters
  ansible.builtin.command: 'psql -c "CREATE EXTENSION pg_trgm;" peertube_prod && psql -c "CREATE EXTENSION unaccent;" peertube_prod'
  become_user: postgres
  become: true

- name: Get PeerTube Version
  ansible.builtin.command: VERSION=$(curl -s https://api.github.com/repos/chocobozzz/peertube/releases/latest | grep tag_name | cut -d '"' -f 4) && echo "Latest Peertube version is $VERSION"
  become: true

- name: Create dirs
  ansible.builtin.file:
    path: "{{ item.src }}"
    state: directory
  become: true
  become_user: peertube
  loop:
    - { src: /var/www/peertube/config }
    - { src: /var/www/peertube/storage }
    - { src: /var/www/peertube/versions}

- name: Set permissions for config directory
  ansible.builtin.file:
    path: /var/www/peertube/config
    state: directory
    mode: 0750
  become: true
  become_user: peertube

- name: Get PeerTube
  ansible.builtin.command: 'cd /var/www/peertube/versions && wget -q "https://github.com/Chocobozzz/PeerTube/releases/download/${VERSION}/peertube-${VERSION}.zip"'
  become_user: peertube
  become: true

- name: Unzip PeerTube
  ansible.builtin.command: 'cd /var/www/peertube/versions && unzip -q peertube-${VERSION}.zip && rm peertube-${VERSION}.zip'
  become_user: peertube
  become: true

- name: Create symlink
  ansible.builtin.command: 'cd /var/www/peertube && ln -s versions/peertube-${VERSION} ./peertube-latest'
  become_user: peertube
  become: true

- name: Install via yarn
  ansible.builtin.command: 'cd /var/www/peertube/peertube-latest && sudo -H -u peertube yarn install --production --pure-lockfile'
  become: true

- name: Copy PeerTube configfiles
  ansible.builtin.command: 'cp /var/www/peertube/peertube-latest/config/default.yaml /var/www/peertube/config/default.yaml'
  become_user: peertube
  become: true

- name: Copy PeerTube configfiles II
  ansible.builtin.template:
    src: production.yaml.j2
    dest: /var/www/peertube/config/production.yaml
    owner: peertube
    group: peertube
    mode: 0644
  become: true

- name: Copy nginx config I
  ansible.builtin.command: 'cp /var/www/peertube/peertube-latest/support/nginx/peertube /etc/nginx/sites-available/peertube'
  become: true

- name: Copy nginx config II
  ansible.builtin.command: "sed -i 's/${WEBSERVER_HOST}/{{ ansible_inventory }}/g' /etc/nginx/sites-available/peertube"
  become: true

- name: Copy nginx config III
  ansible.builtin.command: "sed -i 's/${PEERTUBE_HOST}/127.0.0.1:9000/g' /etc/nginx/sites-available/peertube"
  become: true

- name: Create nginx symlink
  ansible.builtin.command: "ln -s /etc/nginx/sites-available/peertube /etc/nginx/sites-enabled/peertube"
  become: true

- name: Stop nginx
  ansible.builtin.systemd_service:
    name: nginx
    state: stopped
  become: true

- name: Create certbot cert
  ansible.builtin.command: "certbot certonly --standalone # interactive"
  become: true
  when: PUBLICCERT = "certbot"

- name: Create selfsigned cert
  ansible.builtin.command: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/letsencrypt/live/{{ ansible_inventory }}/privkey.pem -out /etc/letsencrypt/live/{{ ansible_inventory }}/fullchain.pem -subj "/C=CH/ST=Zurich/L=Zurich/O=ENPCON/OU=CCC/CN={{ ansible_inventory }}"
  become: true
  when: PUBLICCERT = "selfsigned"

- name: Restart nginx
  ansible.builtin.systemd_service:
    name: nginx
    state: restarted
    enabled: true
  become: true

- name: Copy sysctl file
  ansible.builtin.command: "cp /var/www/peertube/peertube-latest/support/sysctl.d/30-peertube-tcp.conf /etc/sysctl.d/"
  become: true

- name: Apply sysctl file
  ansible.builtin.command: "sysctl -p /etc/sysctl.d/30-peertube-tcp.conf"
  become: true

- name: Copy systemd unitfile
  ansible.builtin.command: "cp /var/www/peertube/peertube-latest/support/systemd/peertube.service /etc/systemd/system/"
  become: true

- name: Reload systemd daemon
  ansible.builtin.systemd_service:
    daemon_reload: true
  become: true

- name: Start PeerTube
  ansible.builtin.systemd_service:
    name: peertube
    state: started
    enabled: true
  become: true

### Install peertube-cli
# node --version # Should be >= 16.x
# sudo npm install -g @peertube/peertube-cli
# peertube-cli auth add -u 'PEERTUBE_URL' -U 'PEERTUBE_USER' --password 'PEERTUBE_PASSWORD'
# peertube-cli upload <videoFile>

...
